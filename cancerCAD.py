import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.tri as mtri
import matplotlib.patches as mpatches

fig = plt.figure()

def center(pointList):
    L = len(pointList)
    xSum = 0
    ySum = 0
    for point in pointList:
        xSum += point[0]
        ySum += point[1]
    return (xSum/L,ySum/L) #returns average of all points, A.K.A. Barycenter

def getAngle(x,y):
    epsilon = 0.001
    distance = ((x**2)+(y**2))**.5 #normalize first, from zero (origin)
    if distance < epsilon:
        return 0 #too close to center, don't want to use this point
    theta = np.arccos(x/distance) #need to multiply by SIGN of y
    if y<0: theta*= -1 #accounts for sin function, which is odd
    return theta

    
# Area of Polygon using Shoelace formula
# http://en.wikipedia.org/wiki/Shoelace_formula
# FB - 20120218
# corners must be ordered in clockwise or counter-clockwise direction
def polyArea(polygon):
    n = len(polygon) # of corners
    area = 0.0
    for i in range(n):
        j = (i + 1) % n
        area += polygon[i][0] * polygon[j][1]
        area -= polygon[j][0] * polygon[i][1]
    area = abs(area) / 2.0
    return area

def cancerVolume(allPolygons):
    volume = 0
    for i in allPolygons:
        volume += polyArea(i)
    return volume

def interleave(list1, list2): #from 15-112 course site
    # This version allows for different-length lists
    if (len(list1) == 0):
        return list2
    elif (len(list2) == 0):
        return list1
    else:
        return [list1[0] , list2[0]] + interleave(list1[1:], list2[1:])


def cancerCAD(allPolygons,sliceThickness = 5):
    #Create 5 lists: x,y,z,u,v
    allPoints = []
    #create lists to store x,y,z and u,v values
    x = []
    y = []
    z = []
    u = []
    v = []

    for i in range(len(allPolygons)):
        if allPolygons[i] != []:
            cx,cy = center(allPolygons[i]) #feed one allPolygons at a time, find center
            for point in allPolygons[i]:
                x.append(point[0]) #add coordinates to lists
                y.append(point[1])
                z.append(i*sliceThickness)
                v.append(i*sliceThickness)
                dx = point[0] - cx #find differences between center and each point
                dy = point[1] - cy
                theta = getAngle(dx,dy)
                u.append(theta)

    for i in range(len(x)):
        list = [x[i],y[i],z[i]]
        allPoints.append(list)

    print(allPoints)

    xAndY = interleave(x,y)

    allXYZ = interleave(xAndY,z) 

    print(allXYZ)

    # Triangulate parameter space to determine the triangles
    tri = mtri.Triangulation(u, v)

    # Plot the surface.  The triangles in parameter space determine which x, y, z
    # points are connected by an edge.
    ax = fig.add_subplot(1, 1, 1, projection='3d')
    ax.plot_trisurf(x, y, z, triangles=tri.triangles, cmap=plt.cm.Spectral)
    ax.set_xlim(min(x), max(x))
    ax.set_ylim(min(y), max(y))
    ax.set_zlim(min(z), max(z))
    Volume = cancerVolume(allPolygons)
    red_patch = mpatches.Patch(color='red', label='Volume = %s' % (Volume))
    plt.legend(handles=[red_patch])
    plt.show()

if __name__ == "__main__":
    allPolygons = [[(247, 414), (258, 437), (279, 444), (313, 438), (318, 428), 
    (306, 422), (286, 402), (250, 409)], [(244, 411), (257, 438), (265, 453), 
    (277, 465), (286, 475), (316, 468), (316, 458), (295, 458), (298, 448), 
    (323, 433), (300, 409), (275, 390), (240, 410)], [(259, 391), (244, 399), 
    (243, 429), (251, 439), (245, 443), (249, 455), (243, 463), (259, 477), 
    (271, 466), (309, 487), (319, 467), (317, 453), (307, 450), (324, 427), 
    (313, 404), (316, 394), (270, 389)], [(273, 372), (251, 395), (252, 421), 
    (249, 430), (250, 450), (260, 458), (250, 476), (253, 488), (261, 494), 
    (276, 495), (275, 507), (282, 516), (291, 519), (320, 519), (355, 496), 
    (376, 482), (386, 459), (393, 426), (364, 413), (343, 400), (326, 388), 
    (310, 374), (305, 373), (285, 366), (278, 374)], [(273, 381), (246, 388), 
    (245, 418), (243, 438), (242, 464), (249, 479), (257, 490), (268, 496), 
    (288, 485), (298, 497), (304, 499), (323, 496), (336, 484), (331, 473), 
    (348, 465), (327, 434), (341, 422), (347, 417), (343, 413), (316, 380), 
    (301, 373), (279, 378)], [(270, 387), (241, 392), (242, 411), (246, 430), 
    (246, 452), (241, 459), (249, 478), (265, 489), (281, 481), (296, 480), 
    (312, 500), (321, 477), (339, 464), (337, 441), (327, 434), (335, 415), 
    (327, 400), (313, 378), (267, 385)], [(265, 381), (245, 395), (245, 418), 
    (244, 425), (238, 435), (244, 455), (244, 474), (257, 493), (291, 491), 
    (295, 505), (338, 498), (346, 481), (338, 475), (357, 467), (365, 456), 
    (367, 419), (353, 404), (340, 404), (318, 376), (296, 366), (264, 377)], 
    [(335, 393), (311, 374), (287, 368), (270, 369), (251, 391), (240, 404), 
    (244, 422), (239, 430), (242, 448), (251, 485), (266, 489), (285, 501), 
    (285, 513), (323, 501), (344, 493), (349, 488), (373, 479), (385, 460), 
    (383, 443), (372, 422), (356, 407), (340, 398)], [(368, 422), (349, 405), 
    (341, 405), (326, 385), (305, 370), (280, 363), (250, 380), (242, 394), 
    (245, 420), (233, 425), (242, 444), (242, 456), (252, 487), (260, 491), 
    (281, 498), (286, 509), (306, 506), (354, 502), (372, 488), (382, 466), 
    (379, 423), (374, 420)], [(365, 419), (346, 401), (309, 374), (286, 366), 
    (257, 381), (246, 400), (247, 418), (235, 424), (241, 434), (247, 483), 
    (253, 492), (273, 499), (281, 500), (278, 507), (291, 514), (318, 512), 
    (356, 500), (382, 477), (386, 440), (385, 414), (373, 415), (368, 408)], 
    [(385, 417), (371, 417), (347, 403), (347, 403), (313, 376), (294, 370), 
    (271, 371), (251, 381), (246, 400), (248, 424), (238, 435), (251, 482), 
    (256, 497), (275, 500), (275, 510), (285, 518), (317, 517), (342, 508), 
    (361, 492), (379, 478), (391, 459), (391, 435), (388, 424)], [(387, 428), 
    (345, 414), (333, 388), (310, 375), (283, 367), (264, 373), (253, 397), 
    (249, 409), (254, 419), (251, 425), (249, 449), (260, 459), (256, 478), 
    (261, 498), (272, 500), (283, 521), (296, 522), (330, 512), (361, 503), 
    (387, 482), (393, 457), (390, 429)], [(377, 432), (349, 414), (321, 386), 
    (290, 374), (269, 376), (258, 391), (257, 406), (261, 411), (254, 431), 
    (257, 447), (259, 457), (258, 467), (251, 470), (254, 492), (266, 503), 
    (274, 502), (286, 519), (313, 522), (344, 506), (356, 497), (376, 480), 
    (390, 459), (391, 438), (382, 434)], [(383, 430), (358, 415), (344, 419), 
    (332, 396), (303, 380), (278, 375), (266, 384), (257, 403), (251, 420), 
    (262, 419), (247, 427), (254, 446), (265, 458), (265, 466), (256, 463), 
    (253, 465), (257, 492), (263, 498), (274, 505), (288, 519), (288, 519), 
    (328, 518), (380, 484), (389, 453), (387, 431)], [(379, 441), (363, 438), 
    (350, 437), (317, 393), (307, 385), (289, 385), (287, 396), (284, 401), 
    (267, 404), (253, 417), (252, 433), (257, 449), (270, 456), (270, 459), 
    (267, 467), (248, 467), (248, 467), (255, 495), (267, 507), (277, 514), 
    (291, 519), (326, 511), (365, 498), (378, 476), (383, 445)], [(370, 444), 
    (365, 437), (357, 440), (346, 431), (346, 422), (320, 396), (308, 384), 
    (290, 396), (282, 415), (256, 424), (259, 445), (274, 452), (271, 462), 
    (254, 462), (253, 473), (260, 496), (277, 507), (285, 511), (288, 520), 
    (316, 522), (344, 503), (363, 492), (379, 473), (380, 466), (371, 459), 
    (374, 450), (370, 443)], [(370, 478), (372, 458), (364, 442), (351, 437), 
    (341, 437), (343, 429), (340, 420), (320, 405), (292, 400), (266, 422), 
    (258, 439), (277, 455), (277, 463), (261, 464), (261, 464), (250, 464), 
    (257, 494), (281, 506), (292, 518), (308, 520), (328, 510), (345, 502), 
    (368, 484), (371, 473)], [(339, 436), (333, 428), (337, 418), (311, 406), 
    (286, 408), (263, 423), (261, 436), (272, 453), (281, 460), (269, 464), 
    (254, 464), (254, 477), (264, 496), (283, 506), (289, 517), (306, 517), 
    (335, 510), (349, 495), (368, 480), (369, 451), (343, 438)], [(361, 462), 
    (343, 447), (330, 434), (333, 428), (323, 413), (301, 414), (289, 420), 
    (283, 412), (270, 425), (266, 434), (288, 454), (288, 458), (275, 469), 
    (257, 469), (261, 490), (290, 501), (293, 513), (316, 512), (353, 494), 
    (369, 477), (361, 463)], [(357, 468), (342, 461), (317, 461), (304, 465), 
    (294, 457), (278, 469), (261, 471), (269, 487), (302, 503), (302, 513), 
    (332, 508), (348, 489), (368, 475), (355, 469)], [(305, 465), (268, 469), 
    (268, 482), (292, 499), (302, 503), (309, 510), (333, 489), (352, 480), 
    (348, 468), (342, 455), (307, 462)], [(338, 481), (335, 463), (274, 470), 
    (267, 482), (295, 497), (310, 501), (333, 481)], [(287, 470), (278, 470), 
    (276, 481), (281, 483), (287, 495), (312, 497), (323, 489), (332, 477), 
    (329, 466), (287, 466)], [(312, 490), (322, 477), (314, 466), (294, 468), 
    (283, 474), (308, 490)], [], [], [], [], [], [], [], [], [], [], [], [], 
    [], [], [], [], [], [], [], [], []]
    cancerCAD(allPolygons)

